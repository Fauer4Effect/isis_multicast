#pragma once
#include <cstdint>
#include <vector>

namespace messages {

class Message {
 public:
  virtual ~Message() = default;
  virtual void serialize(std::vector<uint32_t>& buf) = 0;
};

class DataMessage : Message {
 public:
  DataMessage(uint32_t type, uint32_t sender, uint32_t msg_id, uint32_t data);
  DataMessage(std::vector<uint32_t>& buf);

  void serialize(std::vector<uint32_t>& buf);

 private:
  uint32_t type;    // must be 1
  uint32_t sender;  // sender's id
  uint32_t msg_id;  // id of the message generated by sender
  uint32_t data;    // dummy integer
};

class AckMessage : Message {
 public:
  AckMessage(uint32_t type, uint32_t sender, uint32_t msg_id,
             uint32_t proposed_seq, uint32_t proposer);
  AckMessage(std::vector<uint32_t>& buf);

  void serialize(std::vector<uint32_t>& buf);

 private:
  uint32_t type;          // must be 2
  uint32_t sender;        // sender of DataMessage
  uint32_t msg_id;        // id of DataMessage generated by sender
  uint32_t proposed_seq;  // proposed sequence number
  uint32_t proposer;      // process id of proposer
};

class SeqMessage : Message {
 public:
  SeqMessage(uint32_t type, uint32_t sender, uint32_t msg_id,
             uint32_t final_seq, uint32_t final_seq_proposer);
  SeqMessage(std::vector<uint32_t>& buf);

  void serialize(std::vector<uint32_t>& buf);

 private:
  uint32_t type;                // must be 3
  uint32_t sender;              // sender of DataMessage
  uint32_t msg_id;              // id of DataMessage generated by sender
  uint32_t final_seq;           // final sequence number selected by sender
  uint32_t final_seq_proposer;  // process id of the proposer who proposed
                                // final_seq
};
}  // namespace messages
